print(paste(i, new_imputed_HFs_maladm_data_list[[i]][[3]], sep = " "))
}
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[761]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[761], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[860]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[860], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[936]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[936], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[761]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[761], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[860]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[860], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[936]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[936], "maladm_ov5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_allout_u5_data_list[[1449]][[1]],
title = paste(names(new_imputed_HFs_allout_u5_data_list)[1449], "allout_u5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_allout_u5_data_list[[1492]][[1]],
title = paste(names(new_imputed_HFs_allout_u5_data_list)[1492], "allout_u5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_conf_u5_data_list[[1252]][[1]],
title = paste(names(new_imputed_HFs_conf_u5_data_list)[1252], "conf_u5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_conf_u5_data_list[[1535]][[1]],
title = paste(names(new_imputed_HFs_conf_u5_data_list)[1535], "conf_u5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_conf_u5_data_list[[1551]][[1]],
title = paste(names(new_imputed_HFs_conf_u5_data_list)[1551], "conf_u5", sep = " "))
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman", )
# na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman", model = "auto.arima")
a <- na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
# na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
b <- na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman", model = "auto.arima")
b
a
a == b
new_imputed_HFs_maladm_data_list[[761]][[1]]
# na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "ma")
# na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
c <- na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "ma")
b == c
b
c
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "L-BFGS-B")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = NULL)
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "L-BFGS-B") # same as typing nothing or NULL
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima")
# na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "ma")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "Nelder-Mead")
c<-na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "Nelder-Mead") # Default, same as "L-BFGS-B"
b<- na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "L-BFGS-B") # same as typing nothing or NULL
c == b
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "Brent")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman",
model = "auto.arima", optim.method = "SANN")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "interpolation")
imp<-na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "interpolation")
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[762]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[762], "maladm_ov5", sep = " "))
new_imputed_HFs_maladm_data_list
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[762]][[1]],
title = paste(names(new_imputed_HFs_maladm_data_list)[762], "maladm_ov5", sep = " "))
TS <- new_imputed_HFs_maladm_data_list[[762]][[1]]
TS
ggplot_na_distribution(TS)
TS_NA <- TS
TS_NA[36] <-
NA
ggplot_na_distribution(TS_NA)
na_seadec(TS_NA, algorithm = "kalman")
TS_NA
TS_NA <- TS
TS_NA[38] <- NA
ggplot_na_distribution(TS_NA)
na_seadec(TS_NA, algorithm = "kalman")
ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[761]][[1]])
na_kalman(new_imputed_HFs_maladm_data_list[[761]][[1]])
rm(list = ls(all = TRUE))
require("plyr")
require("dplyr")
require("zoo")
library("imputeTS")
library("maditr")
# Loading health facility dataset
HF_cases <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/outputs/U5_HF_cases_smc_coords.csv")
HF_cases$Date <- as.Date(as.yearmon(HF_cases$Date))
HF_cases <- HF_cases[order(HF_cases$UID, HF_cases$Date),]
## Fixing issue with "boulmiougou boulmiougou csps maiga"
tmp_HF_cases_csps_maiga <- HF_cases[which(HF_cases$UID == "boulmiougou boulmiougou csps maiga"),]
tmp_HF_cases_csps_maiga_unique <- tmp_HF_cases_csps_maiga[duplicated(tmp_HF_cases_csps_maiga[,c("Date","precip_era5")]),]
HF_cases <- HF_cases[-which(HF_cases$UID == "boulmiougou boulmiougou csps maiga"),]
HF_cases <- rbind(HF_cases, tmp_HF_cases_csps_maiga_unique)
HF_cases <- HF_cases[order(HF_cases$UID, HF_cases$Date),]
####################################################################
rle.try_allout_u5 <- ddply(HF_cases, .(UID), summarize,
is_NA = rle(is.na(allout_u5))[2],
consec = rle(is.na(allout_u5))[1])
####################################################################
consec_NA_list_allout_u5 <- split(rle.try_allout_u5[,2:3], rle.try_allout_u5$UID)
consec_NA_list_allout_u5_reshaped <- lapply(consec_NA_list_allout_u5, function(x) {
x <- do.call(cbind.data.frame, x);
names(x) <- c("is.NA", "consec vals");
return(x) })
## Finding HFs that have leq 5 NAs and no more than 2 in a row
imputing_HFs_allout_u5_list <- sapply(consec_NA_list_allout_u5_reshaped, function(x) {
na_rows <- which(x$is.NA == TRUE);
num_NAs <- sum(x[na_rows, "consec vals"]);
if (num_NAs <= 5 & !(0 %in% as.numeric(x[na_rows, "consec vals"] <= 2)))
{
return(TRUE)
} else {
return(FALSE)
}
})
imputing_HFs_allout_u5_data <- HF_cases[which(HF_cases$UID %in% names(imputing_HFs_allout_u5_list[imputing_HFs_allout_u5_list == TRUE])),]
imputing_HFs_allout_u5_data_list <- split(imputing_HFs_allout_u5_data$allout_u5, as.character(imputing_HFs_allout_u5_data$UID))
new_imputed_HFs_allout_u5_data_list <- lapply(imputing_HFs_allout_u5_data_list, function(x) {
cases_ts <- ts(x, start = c(2015, 1), deltat = 1/12);
ma_flag <- 0;
if (sum(cases_ts, na.rm = T) > 0)
{
imp_cases_and_flag <- tryCatch({
imp_cases <- na_kalman(cases_ts);
c(ma_flag, imp_cases);
},
warning = function(cond){
imp_cases <- na_ma(cases_ts);
ma_flag <- 2;
imp_cases_and_flag <- c(ma_flag, imp_cases);
return(imp_cases_and_flag);
})
imp_cases <- imp_cases_and_flag[-1];
ma_flag <- imp_cases_and_flag[1];
} else {
imp_cases <- na_ma(cases_ts);
ma_flag <- 1;
}
ret_list <- list(cases_ts, round(imp_cases), ma_flag);
return(ret_list); # we round to preserve whole numbers
})
sum(sapply(new_imputed_HFs_allout_u5_data_list, function(x) (x[[3]]) > 0))
for (i in 1:length(new_imputed_HFs_allout_u5_data_list))
{
if (new_imputed_HFs_allout_u5_data_list[[i]][[3]] > 0)
print(paste(i, new_imputed_HFs_allout_u5_data_list[[i]][[3]], sep = " "))
}
ggplot_na_distribution(new_imputed_HFs_allout_u5_data_list[[21]][[1]],
title = paste(names(new_imputed_HFs_allout_u5_data_list)[21], "allout_u5", sep = " "))
ggplot_na_distribution(new_imputed_HFs_allout_u5_data_list[[139]][[1]],
title = paste(names(new_imputed_HFs_allout_u5_data_list)[139], "allout_u5", sep = " "))
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]])
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]])
rm(list = ls(all = TRUE))
require("plyr")
require("dplyr")
require("zoo")
library("imputeTS")
library("maditr")
# Loading health facility dataset
HF_cases <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/outputs/U5_HF_cases_smc_coords.csv")
HF_cases$Date <- as.Date(as.yearmon(HF_cases$Date))
HF_cases <- HF_cases[order(HF_cases$UID, HF_cases$Date),]
## Fixing issue with "boulmiougou boulmiougou csps maiga"
tmp_HF_cases_csps_maiga <- HF_cases[which(HF_cases$UID == "boulmiougou boulmiougou csps maiga"),]
tmp_HF_cases_csps_maiga_unique <- tmp_HF_cases_csps_maiga[duplicated(tmp_HF_cases_csps_maiga[,c("Date","precip_era5")]),]
HF_cases <- HF_cases[-which(HF_cases$UID == "boulmiougou boulmiougou csps maiga"),]
HF_cases <- rbind(HF_cases, tmp_HF_cases_csps_maiga_unique)
HF_cases <- HF_cases[order(HF_cases$UID, HF_cases$Date),]
rle.try_maladm <- ddply(HF_cases, .(UID), summarize,
is_NA = rle(is.na(maladm_ov5))[2],
consec_NAs = rle(is.na(maladm_ov5))[1])
####################################################################
consec_NA_list_maladm <- split(rle.try_maladm[,2:3], rle.try_maladm$UID)
consec_NA_list_maladm_reshaped <- lapply(consec_NA_list_maladm, function(x) {
x <- do.call(cbind.data.frame, x);
names(x) <- c("is.NA", "consec vals");
return(x) })
## Finding HFs that have leq 5 NAs and no more than 2 in a row
imputing_HFs_maladm_list <- sapply(consec_NA_list_maladm_reshaped, function(x) {
na_rows <- which(x$is.NA == TRUE);
num_NAs <- sum(x[na_rows, "consec vals"]);
if (num_NAs <= 5 & !(0 %in% as.numeric(x[na_rows, "consec vals"] <= 2)))
{
return(TRUE)
} else {
return(FALSE)
}
})
imputing_HFs_maladm_data <- HF_cases[which(HF_cases$UID %in% names(imputing_HFs_maladm_list[imputing_HFs_maladm_list == TRUE])),]
imputing_HFs_maladm_data_list <- split(imputing_HFs_maladm_data$maladm_ov5, as.character(imputing_HFs_maladm_data$UID))
new_imputed_HFs_maladm_data_list <- lapply(imputing_HFs_maladm_data_list, function(x) {
cases_ts <- ts(x, start = c(2015, 1), deltat = 1/12);
ma_flag <- 0;
if (sum(cases_ts, na.rm = T) > 0)
{
imp_cases_and_flag <- tryCatch({
imp_cases <- na_seadec(cases_ts, algorithm = "kalman");
c(ma_flag, imp_cases);
},
warning = function(cond){
imp_cases <- na_seadec(cases_ts, algorithm = "ma");
ma_flag <- 2;
imp_cases_and_flag <- c(ma_flag, imp_cases);
return(imp_cases_and_flag);
})
imp_cases <- imp_cases_and_flag[-1];
ma_flag <- imp_cases_and_flag[1];
} else {
imp_cases <- na_seadec(cases_ts, algorithm = "ma");
ma_flag <- 1;
}
ret_list <- list(cases_ts, round(imp_cases), ma_flag);
return(ret_list); # we round to preserve whole numbers
})
na_seadec(new_imputed_HFs_maladm_data_list[[761]][[1]], algorithm = "kalman")
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]])
na_seadec(normalized_TS, algorithm = "kalman")
new_imputed_HFs_maladm_data_list[[761]][[1]]
mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))
mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
na_seadec(normalized_TS, algorithm = "kalman")
ggplot_na_imputations(normalized_TS, na_seadec(normalized_TS, algorithm = "kalman"))
imp <- na_seadec(normalized_TS, algorithm = "kalman")
ggplot_na_imputations(normalized_TS, imp)
ggplot_na_distribution(normalized_TS)
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS <- c(normalized_TS[1:38], NA, normalized_TS[40:48])
na_seadec(normalized_TS, algorithm = "kalman")
normalized_TS <- ts(normalized_TS, start = c(2015, 1), deltat = 1/12);
na_seadec(normalized_TS, algorithm = "kalman")
ggplot_na_distribution(normalized_TS)
normalized_TS
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS
normalized_TS <- c(normalized_TS[1:38], NA, normalized_TS[40:48])
normalized_TS
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS <- c(normalized_TS[1:38], NA, normalized_TS[39:48])
normalized_TS
normalized_TS <- (new_imputed_HFs_maladm_data_list[[761]][[1]][-39] - mean(new_imputed_HFs_maladm_data_list[[761]][[1]][-39]))/sd(new_imputed_HFs_maladm_data_list[[761]][[1]][-39])
normalized_TS <- c(normalized_TS[1:38], NA, normalized_TS[39:47])
normalized_TS <- ts(normalized_TS, start = c(2015, 1), deltat = 1/12);
na_seadec(normalized_TS, algorithm = "kalman")
ggplot_na_distribution(normalized_TS)
ggplot_na_imputations(normalized_TS, na_seadec(normalized_TS, algorithm = "kalman"))
library("gridExtra")
plot_norm <- ggplot_na_imputations(normalized_TS, na_seadec(normalized_TS, algorithm = "kalman"))
plot_orig <- ggplot_na_distribution(new_imputed_HFs_maladm_data_list[[761]][[1]])
grid.arrange(plot_norm, plot_orig, ncol=1)
rm(list = ls(all = TRUE))
require("ggplot2")
require("plyr")
require("dplyr")
require("zoo")
require("gridExtra")
require("lubridate")
require("MASS")
require("nlme")
require("lme4")
# Loading data and ordering it
cases <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/outputs/modeling_proj - filtered HFs_16/HF filtered data with criterion/U5_Ov5_DS_cases_seasonal_smc_kalman_imputes_HF_filtered_both_u5_ov5.csv", header  = TRUE, strip.white = TRUE, stringsAsFactors = FALSE)
cases$U5_pop <- cases$District.Pop * .18
cases$Ov5_pop <- cases$District.Pop * .82
cases$Date <- as.yearmon(cases$Date)
cases <- cases[order(cases$District, cases$Date),]
# Finding what date SMC was first implemented in each district
SMC.init_tmp <- cases[which(cases$SMC.received == 1),
c("District", "Date")]
SMC.init_tmp_ordered <- SMC.init_tmp[order(SMC.init_tmp$District, SMC.init_tmp$Date),]
SMC.init <- SMC.init_tmp_ordered[!duplicated(SMC.init_tmp_ordered$District),]
# Fixing so we get 2014 start dates where appropriate
DS_SMC_2014 <- c("bogande", "bousse", "boussouma", "garango", "kaya",
"sebba", "seguenega", "tougan")
SMC.init[which(SMC.init$District %in% DS_SMC_2014), "Date"] <- as.yearmon("Aug 2014")
# Same for 2019
SMC.init_2019 <- data.frame(District = c("baskuy", "bogodogo", "boulmiougou",
"nongr-massom", "sig-noghin"),
Date = as.yearmon(rep("Jul 2019", 5)))
SMC.init <- rbind(SMC.init, SMC.init_2019)
names(SMC.init)[2] <- "SMC.init_date"
# Joining SMC initialization date information
cases <- inner_join(cases, SMC.init, by = "District")
# Make malaria share response
cases$prop_u5 <- cases$conf_rdt_mic_u5 / cases$allout_u5
# Peaks in precipitation precede peaks in incidence by 1 or 2 months
# Make lag 1 column for each district
make_precip_lag1 <- function(precip)
{
precip_lag1 <- NA
precip_lag1[2:length(precip)] <- precip[1:(length(precip)-1)]
return(precip_lag1)
}
tmp_precip_lag1_list <- lapply(unique(cases$District), function(x)
make_precip_lag1(cases[which(cases$District == x), "precip_era5"]))
cases$precip_lag1 <- unlist(tmp_precip_lag1_list)
# Make lag 2 column for each district
make_precip_lag2 <- function(precip)
{
precip_lag2 <- NA
precip_lag2[3:length(precip)] <- precip[1:(length(precip)-2)]
return(precip_lag2)
}
tmp_precip_lag2_list <- lapply(unique(cases$District), function(x)
make_precip_lag2(cases[which(cases$District == x), "precip_era5"]))
cases$precip_lag2 <- unlist(tmp_precip_lag2_list)
ITN_usage <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/map raster outputs/MAP_ITN_usage_BF.csv", stringsAsFactors = FALSE)
district_map <- cbind(sort(unique(cases$District)),
sort(unique(ITN_usage$District))[c(1:40,42,41,43:70)][-50])
for (i in 1:nrow(district_map))
{
DS <- district_map[i, 2]
new_name_DS <- district_map[i, 1]
ITN_usage[which(ITN_usage$District == DS), "District"] <- new_name_DS
}
cases <- left_join(cases, ITN_usage, by = c("District", "year"))
# Subset data for just months that had SMC coverage
cases <- cases[which(cases$Date %in%
unique(cases[which(cases$SMC.received == 1), "Date"])),]
## Make regression dataset for both U5 (treatment) and OV5 (control) model
cases_data_trt <- cases[,c("District", "Date", "SMC.init_date",
"precip_era5", "precip_lag1", "precip_lag2", "ITN_use",
"conf_rdt_mic_u5", "allout_u5", "U5_pop",
"District.Pop")]
names(cases_data_trt)[8:10] <- c("conf_cases", "allout_cases", "group_pop")
cases_data_trt$age_group <- "u5"
cases_data_trt <- cases_data_trt[which(year(cases_data_trt$SMC.init_date) %in% 2016:2019), ]
cases_data_trt$treat_2016 <- ifelse(year(cases_data_trt$SMC.init_date) == 2016, 1, 0)
cases_data_trt$treat_2017 <- ifelse(year(cases_data_trt$SMC.init_date) == 2017, 1, 0)
cases_data_trt$treat_2018 <- ifelse(year(cases_data_trt$SMC.init_date) == 2018, 1, 0)
# Create time variable to create DiD variable
time_2016 <- ifelse(year(cases_data_trt$Date) >= 2016, 1, 0)
time_2017 <- ifelse(year(cases_data_trt$Date) >= 2017, 1, 0)
time_2018 <- ifelse(year(cases_data_trt$Date) >= 2018, 1, 0)
# Create treatment effect variable for each SMC rollout group
cases_data_trt$did_2016 <- cases_data_trt$treat_2016 * time_2016
cases_data_trt$did_2017 <- cases_data_trt$treat_2017 * time_2017
cases_data_trt$did_2018 <- cases_data_trt$treat_2018 * time_2018
cases_data_control <- cases[,c("District", "Date", "SMC.init_date",
"precip_era5", "precip_lag1", "precip_lag2", "ITN_use",
"conf_rdt_mic_ov5", "allout_ov5", "Ov5_pop",
"District.Pop")]
names(cases_data_control)[8:10] <- c("conf_cases", "allout_cases", "group_pop")
cases_data_control$age_group <- "ov5_control"
cases_data_control <- cases_data_control[which(year(cases_data_control$SMC.init_date) %in% 2016:2019), ]
cases_data_control$treat_2016 <- 0
cases_data_control$treat_2017 <- 0
cases_data_control$treat_2018 <- 0
## These should for sure be 0 so as to not take into account these ov5 people for the effect size
cases_data_control$did_2016 <- 0
cases_data_control$did_2017 <- 0
cases_data_control$did_2018 <- 0
cases_data_ov5_comp <- rbind(cases_data_trt, cases_data_control)
didreg <- glmmPQL(conf_cases ~ as.factor(year(Date)) + as.factor(age_group) +
as.factor(treat_2016) + as.factor(treat_2017) + as.factor(treat_2018) +
as.factor(did_2016) + as.factor(did_2017) + as.factor(did_2018) +
ITN_use + log(precip_lag1 + 1) + log(precip_lag2 + 1) +
offset(log(allout_cases)),
data = cases_data_ov5_comp, family = poisson(link = "log"),
random = list(District = pdBlocked(list(pdIdent(~ITN_use - 1),
pdCompSymm(~log(precip_lag1 + 1) +
log(precip_lag2 + 1) - 1)))))
summary(didreg)
round((1 - exp(intervals(didreg)$fixed[9:11,3:1]))*100, 2)
###############################################
##  Difference-in-differences model fitting  ##
###############################################
#
#   Testing based on ACCESS-SMC denominator
#   Cant see 2015 effect size in diff-in-diff framework since
#       we have no pre-SMC data for 2015 group
#
#
rm(list = ls(all = TRUE))
require("ggplot2")
require("plyr")
require("dplyr")
require("zoo")
require("gridExtra")
require("lubridate")
require("MASS")
require("nlme")
require("lme4")
# Loading data and ordering it
cases <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/outputs/modeling_proj - filtered data by crieterion/U5_Ov5_DS_cases_seasonal_smc_kalman_imputes_filtered_both_u5_ov5.csv", header  = TRUE, strip.white = TRUE, stringsAsFactors = FALSE)
cases$U5_pop <- cases$District.Pop * .18
cases$Ov5_pop <- cases$District.Pop * .82
cases$Date <- as.yearmon(cases$Date)
cases <- cases[order(cases$District, cases$Date),]
# Finding what date SMC was first implemented in each district
SMC.init_tmp <- cases[which(cases$SMC.received == 1),
c("District", "Date")]
SMC.init_tmp_ordered <- SMC.init_tmp[order(SMC.init_tmp$District, SMC.init_tmp$Date),]
SMC.init <- SMC.init_tmp_ordered[!duplicated(SMC.init_tmp_ordered$District),]
# Fixing so we get 2014 start dates where appropriate
DS_SMC_2014 <- c("bogande", "bousse", "boussouma", "garango", "kaya",
"sebba", "seguenega", "tougan")
SMC.init[which(SMC.init$District %in% DS_SMC_2014), "Date"] <- as.yearmon("Aug 2014")
# Same for 2019
SMC.init_2019 <- data.frame(District = c("baskuy", "bogodogo", "boulmiougou",
"nongr-massom", "sig-noghin"),
Date = as.yearmon(rep("Jul 2019", 5)))
SMC.init <- rbind(SMC.init, SMC.init_2019)
names(SMC.init)[2] <- "SMC.init_date"
# Joining SMC initialization date information
cases <- inner_join(cases, SMC.init, by = "District")
# Make malaria share response
cases$prop_u5 <- cases$conf_rdt_mic_u5 / cases$allout_u5
# Peaks in precipitation precede peaks in incidence by 1 or 2 months
# Make lag 1 column for each district
make_precip_lag1 <- function(precip)
{
precip_lag1 <- NA
precip_lag1[2:length(precip)] <- precip[1:(length(precip)-1)]
return(precip_lag1)
}
tmp_precip_lag1_list <- lapply(unique(cases$District), function(x)
make_precip_lag1(cases[which(cases$District == x), "precip_era5"]))
cases$precip_lag1 <- unlist(tmp_precip_lag1_list)
# Make lag 2 column for each district
make_precip_lag2 <- function(precip)
{
precip_lag2 <- NA
precip_lag2[3:length(precip)] <- precip[1:(length(precip)-2)]
return(precip_lag2)
}
tmp_precip_lag2_list <- lapply(unique(cases$District), function(x)
make_precip_lag2(cases[which(cases$District == x), "precip_era5"]))
cases$precip_lag2 <- unlist(tmp_precip_lag2_list)
ITN_usage <- read.csv("~/Box/NU-malaria-team/projects/smc_impact/data/map raster outputs/MAP_ITN_usage_BF.csv", stringsAsFactors = FALSE)
district_map <- cbind(sort(unique(cases$District)),
sort(unique(ITN_usage$District))[c(1:40,42,41,43:70)])
for (i in 1:nrow(district_map))
{
DS <- district_map[i, 2]
new_name_DS <- district_map[i, 1]
ITN_usage[which(ITN_usage$District == DS), "District"] <- new_name_DS
}
cases <- left_join(cases, ITN_usage, by = c("District", "year"))
# Subset data for just months that had SMC coverage
cases <- cases[which(cases$Date %in%
unique(cases[which(cases$SMC.received == 1), "Date"])),]
## Make regression dataset for both U5 (treatment) and OV5 (control) model
cases_data_trt <- cases[,c("District", "Date", "SMC.init_date",
"precip_era5", "precip_lag1", "precip_lag2", "ITN_use",
"conf_rdt_mic_u5", "allout_u5", "U5_pop",
"District.Pop")]
names(cases_data_trt)[8:10] <- c("conf_cases", "allout_cases", "group_pop")
cases_data_trt$age_group <- "u5"
cases_data_trt <- cases_data_trt[which(year(cases_data_trt$SMC.init_date) %in% 2016:2019), ]
cases_data_trt$treat_2016 <- ifelse(year(cases_data_trt$SMC.init_date) == 2016, 1, 0)
cases_data_trt$treat_2017 <- ifelse(year(cases_data_trt$SMC.init_date) == 2017, 1, 0)
cases_data_trt$treat_2018 <- ifelse(year(cases_data_trt$SMC.init_date) == 2018, 1, 0)
# Create time variable to create DiD variable
time_2016 <- ifelse(year(cases_data_trt$Date) >= 2016, 1, 0)
time_2017 <- ifelse(year(cases_data_trt$Date) >= 2017, 1, 0)
time_2018 <- ifelse(year(cases_data_trt$Date) >= 2018, 1, 0)
# Create treatment effect variable for each SMC rollout group
cases_data_trt$did_2016 <- cases_data_trt$treat_2016 * time_2016
cases_data_trt$did_2017 <- cases_data_trt$treat_2017 * time_2017
cases_data_trt$did_2018 <- cases_data_trt$treat_2018 * time_2018
cases_data_control <- cases[,c("District", "Date", "SMC.init_date",
"precip_era5", "precip_lag1", "precip_lag2", "ITN_use",
"conf_rdt_mic_ov5", "allout_ov5", "Ov5_pop",
"District.Pop")]
names(cases_data_control)[8:10] <- c("conf_cases", "allout_cases", "group_pop")
cases_data_control$age_group <- "ov5_control"
cases_data_control <- cases_data_control[which(year(cases_data_control$SMC.init_date) %in% 2016:2019), ]
cases_data_control$treat_2016 <- 0
cases_data_control$treat_2017 <- 0
cases_data_control$treat_2018 <- 0
## These should for sure be 0 so as to not take into account these ov5 people for the effect size
cases_data_control$did_2016 <- 0
cases_data_control$did_2017 <- 0
cases_data_control$did_2018 <- 0
cases_data_ov5_comp <- rbind(cases_data_trt, cases_data_control)
## Model comparing u5 malaria share to ov5 malaria share in same districts and
#   to both u5 and ov5 malaria share in 2019 control group
didreg <- glmmPQL(conf_cases ~ as.factor(year(Date)) + as.factor(age_group) +
as.factor(treat_2016) + as.factor(treat_2017) + as.factor(treat_2018) +
as.factor(did_2016) + as.factor(did_2017) + as.factor(did_2018) +
ITN_use + log(precip_lag1 + 1) + log(precip_lag2 + 1) +
offset(log(allout_cases)),
data = cases_data_ov5_comp, family = poisson(link = "log"),
random = list(District = pdBlocked(list(pdIdent(~ITN_use - 1),
pdCompSymm(~log(precip_lag1 + 1) +
log(precip_lag2 + 1) - 1)))))
summary(didreg)
intervals(didreg)
didreg <- glmmPQL(conf_cases ~ as.factor(year(Date)) + as.factor(age_group) +
as.factor(treat_2016) + as.factor(treat_2017) + as.factor(treat_2018) +
as.factor(did_2016) + as.factor(did_2017) + as.factor(did_2018) +
ITN_use + log(precip_lag1 + 1) + log(precip_lag2 + 1) +
offset(log(allout_cases)),
data = cases_data_ov5_comp, family = poisson(link = "log"),
random = list(District = pdBlocked(list(pdIdent(~ITN_use - 1),
pdDiag(~log(precip_lag1 + 1) +
log(precip_lag2 + 1) - 1)))))
intervals(didreg)
round((1 - exp(intervals(didreg)$fixed[9:11,3:1]))*100, 2)
